version: "3"
services:
  eco_backend:
    # image: diegozaff/eco_backend:latest
    container_name: eco_backend
    # build: .
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      # Our app does not work without our database
      # so this ensures our database is loaded first
      - postgres
    ports:
      - "3000:3000"
    volumes:
      - ./src:/usr/src/app/src
      - ./nodemon.json:/usr/src/app/nodemon.json

    # command: npm run dev

  # This is the configuration for our PostgreSQL database container
  # Note the `postgres` name is important, in out Node app when we refer
  # to  `host: "postgres"` that value is mapped on the network to the
  # address of this container.
  postgres:
    image: postgres:14.1-alpine
    restart: always
    environment:
      # You can set the value of environment variables
      # in your docker-compose.yml file
      # Our Node app will use these to connect
      # to the database
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      # Standard port for PostgreSQL databases
      - "5432:5432"
    volumes:
      # When the PostgresSQL container is started it will run any scripts
      # provided in the `docker-entrypoint-initdb.d` directory, this connects
      # our seed file to that directory so that it gets run
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data

  # PostgreSQL pgAdmin panel accessible at http://localhost:16543/
  pgadmin-compose:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: "placeholder@example.com"
      PGADMIN_DEFAULT_PASSWORD: "fakepassword123!"
    ports:
      - "16543:80"
    depends_on:
      - postgres
volumes:
  pgdata:
    #create volume automatically if it doesn't already exists
    external: true
